diff -r -u a/impact/debug/maps-panel.js b/impact/debug/maps-panel.js
--- a/impact/debug/maps-panel.js	2013-07-12 09:02:48 -0500
+++ b/impact/debug/maps-panel.js	2013-07-13 07:51:51 -0500
@@ -67,8 +67,8 @@
 		var ts = ig.$new('canvas');
 		var tsctx = ts.getContext('2d');
 		
-		var w = map.tiles.width * s;
-		var h = map.tiles.height * s;
+		var w = (map.tiles.width * s) | 0;
+		var h = (map.tiles.height * s) | 0;
 		var ws = w / map.tilesize;
 		var hs = h / map.tilesize;
 		tsctx.drawImage( map.tiles.data, 0, 0, w, h, 0, 0, ws, hs );
diff -r -u a/impact/image.js b/impact/image.js
--- a/impact/image.js	2013-07-12 09:02:48 -0500
+++ b/impact/image.js	2013-07-19 09:08:15 -0500
@@ -87,9 +87,8 @@
 		// The scaled offscreen canvas becomes the image (data) of this object.
 		
 		var origPixels = ig.getImagePixels( this.data, 0, 0, this.width, this.height );
-		
-		var widthScaled = this.width * scale;
-		var heightScaled = this.height * scale;
+		var widthScaled = (this.width * scale) | 0;
+		var heightScaled = (this.height * scale) | 0;
 
 		var scaled = ig.$new('canvas');
 		scaled.width = widthScaled;
@@ -118,13 +117,13 @@
 		var scale = ig.system.scale;
 		sourceX = sourceX ? sourceX * scale : 0;
 		sourceY = sourceY ? sourceY * scale : 0;
-		width = (width ? width : this.width) * scale;
-		height = (height ? height : this.height) * scale;
+		width = ((width ? width : this.width) * scale) | 0;
+		height = ((height ? height : this.height) * scale) | 0;
 		
 		ig.system.context.drawImage( 
-			this.data, sourceX, sourceY, width, height,
-			ig.system.getDrawPos(targetX), 
-			ig.system.getDrawPos(targetY),
+			this.data, Math.floor(sourceX), Math.floor(sourceY), width, height,
+			Math.floor(ig.system.getDrawPos(targetX)), 
+			Math.floor(ig.system.getDrawPos(targetY)),
 			width, height
 		);
 		
@@ -138,8 +137,8 @@
 		if( !this.loaded || tileWidth > this.width || tileHeight > this.height ) { return; }
 		
 		var scale = ig.system.scale;
-		var tileWidthScaled = Math.floor(tileWidth * scale);
-		var tileHeightScaled = Math.floor(tileHeight * scale);
+		var tileWidthScaled = tileWidth * scale;
+		var tileHeightScaled = tileHeight * scale;
 		
 		var scaleX = flipX ? -1 : 1;
 		var scaleY = flipY ? -1 : 1;
@@ -148,8 +147,22 @@
 			ig.system.context.save();
 			ig.system.context.scale( scaleX, scaleY );
 		}
+
+var perRow = this.width / tileWidth;
+var col = tile % perRow, row = (tile / perRow) | 0;
+var sx = (col * tileWidth * scale) | 0;
+var sy = (row * tileHeight * scale) | 0;
+var sw = (Math.min(this.data.width,
+          (((col + 1) * tileWidth * scale) | 0) + 1) - sx) | 0;
+var sh = (Math.min(this.data.height,
+          (((row + 1) * tileHeight * scale) | 0) + 1) - sy) | 0;
+var dx = ig.system.getDrawPos(targetX) * scaleX - (flipX ? sw : 0);
+var dy = ig.system.getDrawPos(targetY) * scaleY - (flipY ? sh : 0);
+
 		ig.system.context.drawImage( 
 			this.data, 
+      sx, sy, sw, sh, dx, dy, sw, sh
+/*
 			( Math.floor(tile * tileWidth) % this.width ) * scale,
 			( Math.floor(tile * tileWidth / this.width) * tileHeight ) * scale,
 			tileWidthScaled,
@@ -158,7 +171,9 @@
 			ig.system.getDrawPos(targetY) * scaleY - (flipY ? tileHeightScaled : 0),
 			tileWidthScaled,
 			tileHeightScaled
+*/
 		);
+
 		if( flipX || flipY ) {
 			ig.system.context.restore();
 		}
